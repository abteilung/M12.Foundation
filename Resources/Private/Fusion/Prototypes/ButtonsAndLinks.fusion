prototype(M12.Foundation:ButtonLinkAbstract) < prototype(M12.Foundation:Content) {
	url = ${q(node).property('url')}
	url.@process.01 = Neos.Neos:ConvertUris
	@override.url = ${this.url}

	# Only render target (e.g. _blank) in front-end, otherwise, with _blank you cannot anymore edit the button (click on it goes to the href location)
	attributes.target = ${url && q(node).property('htmlTargetBlank') ? q(node).property('htmlTargetBlank') : null}
	attributes.target.@if.isLive = ${node.context.workspace.name == 'live'}

	# Only render `href` attribute when in @live workspace
	attributes.href = ${node.context.workspace.name == 'live' && url ? url : null}

	# Extra link/button options
	attributes.data-reveal-id = ${q(node).property('htmlDataRevealId') ? String.trim(q(node).property('htmlDataRevealId')) : null}
	attributes.data-dropdown = ${q(node).property('htmlDataDropdownId') and !q(node).property('isButtonSplit') ? String.trim(q(node).property('htmlDataDropdownId')) : null}
	attributes.data-options {
		dropdownDirection = ${q(node).property('dropdownDirection') ? 'align:' + q(node).property('dropdownDirection') + ';' : null}
		dropdownHoverable = ${q(node).property('dropdownHoverable') ? 'is_hover:true;' : null}
	}
}

# Link <A>
prototype(M12.Foundation:Link) < prototype(M12.Foundation:ButtonLinkAbstract) {
	templatePath = 'resource://M12.Foundation/Private/Templates/NodeTypes/ButtonLink.html'

	tagName = 'a'
}

# Button
prototype(M12.Foundation:Button) < prototype(M12.Foundation:ButtonLinkAbstract) {
	templatePath = 'resource://M12.Foundation/Private/Templates/NodeTypes/ButtonLink.html'
	
	# Do we render <A> instead of <BUTTON> element?
	@override.renderAnchor = ${this.url || q(node).property('renderAnchor') ? true : false}

	# Add base 'button' class for buttons rendered as <A>
	attributes.class.base = ${renderAnchor ? 'button' : null}

	# Only render type='TYPE' if it is not an <A> element.
	# Also make sure default value 'button' is provided if none is set (to avoid by default submitting the form after each button activation)
	attributes.type = ${false == renderAnchor ? (q(node).property('buttonType') || 'button') : null}

	attributes.class.buttonOptions = ${q(node).property('classOptions') ? String.trim(Array.join(q(node).property('classOptions'), ' ')) : null}

	tagName = ${renderAnchor ? 'a' : 'button'}
}

prototype(M12.Foundation:ButtonGroup) < prototype(M12.Foundation:Content) {
	@class = 'Neos\\Fusion\\FusionObjects\\TagImplementation'
	tagName = 'ul'
	attributes.class = Neos.Fusion:RawArray {
		base = 'button-group'
	}
	content = Neos.Fusion:Collection {
		collection = ${q(node).children('[instanceof M12.Foundation:Button]')}
		itemRenderer = M12.Foundation:ButtonGroupItem
		itemName = 'node'
		iterationName = 'iterator'
	}
	@process.contentElementWrapping = Neos.Neos:ContentElementWrapping
}

prototype(M12.Foundation:ButtonGroupItem) < prototype(Neos.Fusion:Tag) {
	tagName = 'li'
	content = Neos.Neos:ContentCase
	prototype(Neos.Neos:Content) {
		# Remove contentElementWrapping, because wrapping was already added in ButtonGroupItem
		@process.contentElementWrapping >
	}
	@process.contentElementWrapping = Neos.Neos:ContentElementWrapping
}

# ButtonBar: group of button group(s)
prototype(M12.Foundation:ButtonBar) < prototype(M12.Foundation:Content) {
	@class = 'Neos\\Fusion\\FusionObjects\\TagImplementation'
	attributes.class = Neos.Fusion:RawArray {
		base = 'button-bar'
	}
	content = Neos.Fusion:Collection {
		collection = ${q(node).children('[instanceof M12.Foundation:ButtonGroup]')}
		itemRenderer = M12.Foundation:ButtonGroup
		itemName = 'node'
	}
	@process.contentElementWrapping = Neos.Neos:ContentElementWrapping
}
