prototype(M12.Foundation:ButtonLinkAbstract) < prototype(M12.Foundation:Content) {
	# Get URL
	url = ${q(node).property('urlExt') ? q(node).property('urlExt') : q(node).property('url')}
	url.@process.1 = TYPO3.Neos:ConvertUris
	@override.url = ${this.url}

	attributes.target = ${url && q(node).property('htmlTargetBlank') ? q(node).property('htmlTargetBlank') : null}
	attributes.href = ${url ? url : null}
	attributes.title = ${q(node).property('htmlTitle') ? String.trim(q(node).property('htmlTitle')) : null}

	# Extra link/button options
	attributes.data-reveal-id = ${q(node).property('htmlDataRevealId') ? String.trim(q(node).property('htmlDataRevealId')) : null}
	attributes.data-dropdown = ${q(node).property('htmlDataDropdownId') and !q(node).property('isButtonSplit') ? String.trim(q(node).property('htmlDataDropdownId')) : null}
	attributes.data-options = TYPO3.TypoScript:RawArray {
		dropdownDirection = ${q(node).property('dropdownDirection') ? 'align: ' + q(node).property('dropdownDirection') + ';' : null}
		dropdownHoverable = ${q(node).property('dropdownHoverable') ? 'is_hover: true;' : null}
		# We don't want always 'data-options' attribute here.. so make sure it's set to NULL when it's empty
		@process.stringify {
			expression = ${String.trim(String.pregReplace(Array.join(value,' '),'/\s+/',' '))}
			@position = '1'
		}
		@process.nullify {
			expression = ${value ? value : null}
			@position = 'end'
		}
	}
}

# Link <A>
prototype(M12.Foundation:Link) < prototype(M12.Foundation:ButtonLinkAbstract) {
	templatePath = 'resource://M12.Foundation/Private/Templates/NodeTypes/ButtonLink.html'

	tagName = 'a'
}

# Button
prototype(M12.Foundation:Button) < prototype(M12.Foundation:ButtonLinkAbstract) {
	templatePath = 'resource://M12.Foundation/Private/Templates/NodeTypes/ButtonLink.html'
	
	# Do we render <A> instead of <BUTTON> element?
	@override.renderAnchor = ${this.url || q(node).property('renderAnchor') ? true : false}

	# Add base 'button' class for buttons rendered as <A>
	attributes.class.base = ${renderAnchor ? 'button' : null}

	# Only render type='TYPE' if it is not an <A> element.
	# Also make sure default value 'button' is provided if none is set (to avoid by default submitting the form after each button activation)
	attributes.type = ${false == renderAnchor ? (q(node).property('buttonType') || 'button') : null}

	attributes.class.buttonOptions = ${q(node).property('classOptions') ? String.trim(Array.join(q(node).property('classOptions'), ' ')) : null}

	tagName = ${renderAnchor ? 'a' : 'button'}
}

prototype(M12.Foundation:ButtonGroup) < prototype(M12.Foundation:Content) {
	templatePath = 'resource://M12.Foundation/Private/Templates/NodeTypes/ButtonLink.html'
	sectionName = 'buttonGroup'
	
	attributes.class.base = 'button-group'
	
	@override.parentAttributes = ${this.attributes}

	buttons = TYPO3.TypoScript:Collection {
		collection = ${q(node).children('[instanceof M12.Foundation:Button]')}
		itemRenderer = M12.Foundation:ButtonGroupItem
		itemName = 'node'
		iterationName = 'iterator'
	}
	
	@process.wrapRemover = M12.Utils:WrapRemover
	@process.wrapRemover.wrapperClass = 'extra-wrapper-required-by-neos-backend'
}

prototype(M12.Foundation:ButtonGroupItem) < prototype(M12.Foundation:Content) {
	templatePath = 'resource://M12.Foundation/Private/Templates/NodeTypes/ButtonLink.html'
	sectionName = 'buttonGroupItem'
	
	iterator = ${iterator}
	parentAttributes = ${parentAttributes}

	button = TYPO3.Neos:ContentCase
}

# ButtonBar: group of button group(s)
prototype(M12.Foundation:ButtonBar) < prototype(M12.Foundation:Content) {
	templatePath = 'resource://M12.Foundation/Private/Templates/NodeTypes/ButtonLink.html'
	sectionName = 'buttonBar'
	
	attributes.class.base = 'button-bar'

	buttonGroups = TYPO3.TypoScript:Collection {
		collection = ${q(node).children('[instanceof M12.Foundation:ButtonGroup]')}
		itemRenderer = M12.Foundation:ButtonGroup
		itemName = 'node'
	}
}
