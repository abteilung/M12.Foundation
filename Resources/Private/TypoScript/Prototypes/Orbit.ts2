prototype(M12.Foundation:Orbit) < prototype(M12.Foundation:Content) {
	templatePath = 'resource://M12.Foundation/Private/Templates/NodeTypes/Orbit.html'
	sectionName = 'sliderRoot'

	orbitContent = TYPO3.TypoScript:Tag {
		tagName = 'ul'
		attributes.data-orbit = ''
		attributes.data-options = TYPO3.TypoScript:RawArray {
			animation = ${q(node).property('animation')                 ? 'animation:' + q(node).property('setAnimation') + ';' : null}
			animationSpeed = ${q(node).property('animationSpeed')       ? 'animation_speed:' + String.toInteger(q(node).property('animationSpeed')) + ';' : null}
			timerSpeed = ${q(node).property('timerSpeed')               ? 'timer_speed:' + String.toInteger(q(node).property('timerSpeed')) + ';' : null}
			bullets = ${q(node).property('bullets')                     ? 'bullets:true;' : 'bullets:false;'}
			navigationArrows = ${q(node).property('navigationArrows')   ? 'navigation_arrows:true;' : 'navigation_arrows:false;'}
			nextOnClick = ${q(node).property('nextOnClick')             ? 'next_on_click:true;' : 'next_on_click:false;'}
			slideNumber = ${q(node).property('slideNumber')             ? 'slide_number:true;' : 'slide_number:false;'}
			timer = ${q(node).property('timer')                         ? 'timer:true;' : 'timer:false;'}
			timer.@if.isFrontend = ${node.context.workspace.name == 'live'}
			# Auto-sliding in a backend seems to cause issues, e.g. you're editing something, it slides out etc...
			# Therefore we force it to be off when in backend.
			timerOffForBackend = 'timer:false;'
			timerOffForBackend.@if.isBackend = ${node.context.workspace.name != 'live'}
			variableHeight = ${q(node).property('variableHeight')       ? 'variable_height:true;' : 'variable_height:false;'}
			swipe = ${q(node).property('swipe')                         ? 'swipe:true;' : 'swipe:false;'}
			pauseOnHover = ${q(node).property('pauseOnHover')           ? 'pause_on_hover:true;' : 'pause_on_hover:false;'}
			resumeOnMouseout = ${q(node).property('resumeOnMouseout')   ? 'resume_on_mouseout:true;' : 'resume_on_mouseout:false;'}
		}

		content = TYPO3.TypoScript:Collection {
			collection = ${q(node).children()}
			itemRenderer = M12.Foundation:OrbitItem
			itemName = 'node'
		}
		# Add additional wrapping to orbit-content, because otherwise createjs won't work (it requires elements of contentcollection to be direct children of contentcollection).
		# Can be removed when createjs is dropped.
		@process.contentElementWrapping = TYPO3.Neos:ContentElementWrapping
	}
	@process.wrapRemover = M12.Utils:WrapRemover
	@process.wrapRemover.wrapperClass = 'extra-wrapper-required-by-neos-backend'
}


prototype(M12.Foundation:OrbitItem) < prototype(TYPO3.TypoScript:Tag) {
	content = TYPO3.Neos:ContentCase

	# Re-define how Image is rendered inside slider
	prototype(TYPO3.Neos.NodeTypes:Image) {
		templatePath = 'resource://M12.Foundation/Private/Templates/NodeTypes/Orbit.html'
		sectionName = 'sliderItemImage'
	}
	prototype(TYPO3.Neos:Content) {
		# Remove contentElementWrapping, because wrapping was already added in OrbitItem
		@process.contentElementWrapping>
	}
	@process.contentElementWrapping = TYPO3.Neos:ContentElementWrapping
}
