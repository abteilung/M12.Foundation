# Image TS Object
prototype(TYPO3.Neos.NodeTypes:Image) {
	parentNode = ${q(node).parent().get()}
	parentIsBlockGrid = ${q(this.parentNode).property('_nodeType.name') == 'M12.Foundation:BlockGrid'}

	# Override/set link to image, so it can be shown in modal (reveal modal or lightbox)
	link.@process.clickToZoomLink = TYPO3.Neos:ImageUri {
		asset = ${q(node).property('clickToZoomImage') ? q(node).property('clickToZoomImage') : q(q(node).property('image')).property('originalAsset')}
		maximumWidth = 2560
		maximumHeight = 2560
		@if.clickToZoom = ${q(node).property('clickToZoom') == true}
	}
	@override.url = ${this.link}
	
	# Lightbox is only supported in Block Grid
	isLightbox = ${this.parentIsBlockGrid && q(this.parentNode).property('lightboxEnabled')}
	@override.isLightbox = ${this.isLightbox}
	
	# Modal if `click-to-zoom` option is set and we're not in a lightbox mode
	isModal = ${q(node).property('clickToZoom') && !this.isLightbox}
	@override.isModal = ${this.isModal}

	# Modal content with `click-to-zoom` image.
	modalContent = TYPO3.TypoScript:Tag {
		attributes.id = ${'modal-image-' + q(node).property('_identifier')}
		attributes.data-reveal = ''
		attributes.class = 'reveal-modal reveal-modal--image xlarge text-center'

		content = TYPO3.TypoScript:Array
		content.image = TYPO3.Neos:ImageTag {
			@if.imagePresent = ${q(node).property('clickToZoomImage') || q(q(node).property('image'))}
			# If clickToZoomImage has been provided, simply use it.
			# Otherwise use original `image`.
			# Note: in case image got processed (i.e. cropped) it's image variant
			# - try to use `image.originalAsset`.
			asset = ${q(node).property('clickToZoomImage')
				? q(node).property('clickToZoomImage')
				: (
					q(q(node).property('image')).property('originalAsset')
						? q(q(node).property('image')).property('originalAsset')
						: q(node).property('image')
				)
			}
			maximumWidth = 2560
			maximumHeight = 2560
			attributes.alt = ''
			attributes.class = 'th'
		}
		# Render caption: first from `clickToZoomCaption`, then default image `caption`.
		content.caption = TYPO3.TypoScript:Tag {
			tagName = 'figcaption'
			content = ${q(node).property('clickToZoomCaption') ? q(node).property('clickToZoomCaption') : q(node).property('caption')}
			@if.hasCaption = ${q(node).property('clickToZoomCaption') || q(node).property('caption')}
		}
		content.closeBtn = '<a class="close-reveal-modal">Ã—</a>'
		
		@if.isModal = ${isModal}
	}

	imageAttributes = TYPO3.TypoScript:Attributes
	imageAttributes.data-caption = ${q(node).property('clickToZoomCaption') ? q(node).property('clickToZoomCaption') : null}

	# Attributes added to the <a> link wrapping the image
	linkAttributes = TYPO3.TypoScript:Attributes
	linkAttributes.target = ${q(node).property('linkTarget') ? q(node).property('linkTarget') : null}
	linkAttributes.href = ${url && node.context.workspace.name == 'live' ? url : null}
	linkAttributes.class = TYPO3.TypoScript:RawArray
	linkAttributes.class.@process.nullify = ${Array.join(value,'') ? value : null}
	# Add visual border around image if thumbnail is on
	linkAttributes.class.th = ${q(node).property('classThumbnail') ? 'th' : null}
	# Add extra class .th--no-href if URL is empty (just so we can remove cursor on mouse over for such a links)
	linkAttributes.class.th-no-link = ${url == '' && q(node).property('classThumbnail') ? 'th--no-href' : null }
	linkAttributes.class.radiusAndRounded = ${q(node).property('classRadiusAndRounded')}
	# Open link in modal window if isModal
	linkAttributes.data-reveal-id = ${'modal-image-' + q(node).property('_identifier')}
	linkAttributes.data-reveal-id.@if.modalAndLiveWorkspace = ${isModal && node.context.workspace.name == 'live'}
	
	# Unset `radiusAndRounded` as it's added to `linkAttributes`.
	attributes.class.radiusAndRounded = ${null}

	# Debugging only...
#	attributes.data-is-block-grid = ${'parentIsBlockGrid='+parentIsBlockGrid}
#	attributes.data-is-lightbox = ${'isLightbox='+isLightbox}
#	attributes.data-is-modal = ${'isModal='+isModal}

	# Bug/workaround: Make sure `alt` attribute is always set (so: empty string instead of null/false)
	# Seems like it's not enough  to set `alt` to empty string, it's not rendered by <media:image> helper.
	alternativeText = ${q(node).property('alternativeText') ? q(node).property('alternativeText') : ' '}

	# figureAttributes are rendered for <FIGURE> tag around <IMG>
	figureAttributes = ${this.attributes}
}

prototype(TYPO3.Neos.NodeTypes:TextWithImage) {
	figureAttributes >
	figureAttributes = TYPO3.TypoScript:Attributes
}
