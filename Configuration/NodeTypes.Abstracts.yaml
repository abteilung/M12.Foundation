#
# Mixin to define node title used as a node reference name
# Note: it is based on 'TYPO3.Neos:Node.label' definition
# which takes the 'title' property as a displayed node label.
#
'M12.Foundation:AbstractNodeTitle':
  abstract: TRUE
  properties:
    title:
      type: string
      ui:
        label: 'Change name'
        help:
          message: |
            Override content element's name, so it is easier to find it in the _Structure Tree_ panel.
            
            Setting this field can be also useful if you reference to it (e.g. from _Content references_ element) or search for it.
        inspector:
          group: 'type'
          position: 200

#
# Mixin with custom id / css class / inline css
#
'M12.Foundation:AbstractDevBase':
  abstract: TRUE
  ui:
    inspector:
      groups:
        dev:
          label: 'Advanced settings'
          position: 95
          tab: dev
        devCode:
          label: 'Custom code'
          position: 95
          tab: dev
  properties:
    customCssClass:
      type: string
      ui:
        label: 'Element custom CSS class name(s)'
        help:
          message: |
            When set, this value will be added to the element's `class` attribute in the HTML code.
            
            Note: multiple classes must be **space-separated**.
        reloadIfChanged: TRUE
        inspector:
          group: 'dev'
          position: 10
          editorOptions:
            placeholder: 'None'
      validation:
        regularExpression:
          regularExpression: '/^[-a-z0-9_ ]+$/i'
    customHtmlId:
      type: string
      ui:
        label: 'Element custom HTML ID'
        help:
          message: "If provided, this value will be set as the element's `id` attribute in the HTML code."
        reloadIfChanged: TRUE
        inspector:
          group: 'dev'
          position: 11
          editorOptions:
            placeholder: 'None'
      validation:
        regularExpression:
          regularExpression: '/^[-a-z0-9_]+$/i'
    customCssCode:
      type: string
      ui:
        label: 'Element inline CSS'
        help:
          message: "Add any necessary CSS styling for the element. The value will be set for the element's `style` attribute in the HTML code."
        reloadIfChanged: TRUE
        inspector:
          group: 'devCode'
          position: 30
          editorOptions:
            placeholder: 'e.g. margin-top: 3rem'
    customUserAttributes:
      type: string
      ui:
        label: 'Element extra HTML attributes'
        help:
          message: |
            Add any custom HTML attributes to the element.  
            One per line.
            
            ##### Example
            ```
            data-something=value
            data-options={"foo":"bar"}
            tabindex=0
            ```
        reloadIfChanged: TRUE
        inspector:
          group: 'devCode'
          position: 40
          editor: Content/Inspector/Editors/TextAreaEditor
          editorOptions:
            placeholder: 'e.g. custom-data-attribute=value'


'M12.Foundation:AbstractRadiusRoundedStyle':
  abstract: TRUE
  properties:
    classRadiusAndRounded:
      type: string
      ui:
        label: 'Radius or rounded style'
        reloadIfChanged: TRUE
        inspector:
          group: 'utilityClasses'
          position: 50
          editor: Content/Inspector/Editors/SelectBoxEditor
          editorOptions:
            placeholder: 'No'
            allowEmpty: TRUE
            values:
              radius:
                label: 'Radius'
              round:
                label: 'Rounded'


# Similar to 'M12.Foundation:AbstractRadiusRoundedStyle', but with Radius only
# Appliable to element where 'rounded' style is not applicable.
'M12.Foundation:AbstractRadiusStyle':
  abstract: TRUE
  properties:
    classRadiusAndRounded:
      type: string
      ui:
        label: 'Radius style'
        help:
          message: "Select to have slightly rounded corners for this element."            
        reloadIfChanged: TRUE
        inspector:
          group: 'utilityClasses'
          position: 50
          editor: Content/Inspector/Editors/SelectBoxEditor
          editorOptions:
            placeholder: 'No'
            allowEmpty: TRUE
            values:
              radius:
                label: 'Radius'

'M12.Foundation:AbstractDevCustomLook':
  abstract: TRUE
  ui:
    inspector:
      groups:
        devView:
          position: 10
          tab: dev
          label: 'Custom look'
  properties:
    customLook:
      type: array
      ui:
        label: 'Predefined style / look'
        help:
          message: |
            Can be useful when working with external stylesheet when you have pre-defined set of styles for particular content element. Instead of typing the class name in _Element custom CSS class name_ field, you can select if from here.
            
            This setting will add `style-1`, `style-2`, `style-3` to the element's `class` attribute in the HTML code.
        reloadIfChanged: TRUE
        inspector:
          group: 'devView'
          position: 40
          editor: Content/Inspector/Editors/SelectBoxEditor
          editorOptions:
            placeholder: 'None'
            values:
              style-1:
                label: 'Style 1'
              style-2:
                label: 'Style 2'
              style-3:
                label: 'Style 3'

#
# Mixin:
# Semantic markup, choosing tag name for wrapper element
#
'M12.Foundation:AbstractDevCustomTag':
  abstract: TRUE
  ui:
    inspector:
      groups:
        devSemantic:
          label: 'Semantic Web'
          position: 96
          tab: dev
  properties:
    customTagName:
      type: string
      ui:
        label: 'Element semantic tag type'
        help:
          message: "If you peculiar about HTML markup and its semanticity, you can set here the wrapping tag for the element. Otherwise the default will be `div`."
        reloadIfChanged: TRUE
        inspector:
          group: 'devSemantic'
          position: 50
          editor: Content/Inspector/Editors/SelectBoxEditor
          editorOptions:
            placeholder: 'Default / None'
            allowEmpty: TRUE
            values:
              main:
                label: 'MAIN'
              header:
                label: 'HEADER'
              nav:
                label: 'NAV'
              section:
                label: 'SECTION'
              artile:
                label: 'ARTICLE'
              aside:
                label: 'ASIDE'
              footer:
                label: 'FOOTER'

#
# Mixin to be added to content nodes to render anchors 
# <a id"sectionId"></a> before a content node
#
'M12.Foundation:AbstractSectionId':
  abstract: TRUE
  properties:
    sectionId:
      type: string
      ui:
        label: 'Section ID'
        help:
          message: |
            _Section ID_ is a marker printed in the HTML code. It does **not** have any visual effect on the page, it's just an empty tag rendered as:  
            `<a name="section-id-here"></a>`
            
            When to use? Couple of cases, most common are listed below.
            
            1. **Reference to it from URL address**  
            Let's say you have set _Section ID_ with value `mySectionX` for some element on a very long page. Now you want the visitor to visit directly that part of the page. To do that, add `#mySectionX` to URL address. The visitor will be scrolled to that element with _Section ID_ set.  
            Hint: you can set it using _URL #fragment ID_ page setting.
            
            2. **Use with Magellan Sticky Menu**  
            See help message for _Section in Magellan Sticky Menu_ checkbox below (available only for some content elements).
        reloadIfChanged: TRUE
        inspector:
          group: 'devCode'
          position: 5
          editorOptions:
            placeholder: 'None'
      validation:
        'TYPO3.Neos/Validation/StringLengthValidator':
          minimum: 1
          maximum: 64
        regularExpression:
          regularExpression: '/^[a-z0-9\-]+$/i'


#
# Mixin for content elements which can support section id and magellan menu
# Apply for **non-navigation** node types.
# For navigation elements apply just AbstractSectionId (+ AbstractNavBehavior if applicable) 
#
'M12.Foundation:AbstractSectionIdMagellan':
  abstract: TRUE
  superTypes:
    'M12.Foundation:AbstractSectionId': TRUE
  ui:
    inspector:
      groups:
        navOptions:
          label: 'Navigational options'
          position: 96
          tab: meta
  properties:
    sectionId:
      ui:
        inspector:
          group: 'navOptions'
          position: 10
    magellanSupport:
      type: boolean
      ui:
        label: 'Section in Magellan Sticky Menu'
        help:
          message: |
            _Magellan Sticky Menu_ is especially useful on a long pages with lots of content. It's a fixed-position navigation which helps users **keep track of where they are on a page without scrolling** (see demo [here](http://foundation.zurb.com/docs/components/magellan.html)). The menu will stay fixed at the top of the page as users scroll and the current sections of the page will be highlighted in the menu.
            
            ##### How to set up Magellan Sticky Menu
            
            1. Add a menu element to your page:
                * We recommend to use one of _Top Bar_, _Sub Nav_ or _Side Nav_ menu.
                * Set _Menu behavior_ set to _Magellan Sticky Menu_.
            2. Fill a single page with lots of content.
            3. Identify elements on the page which are your sections and fill _Section ID_ for them. Tick the _Section in Magellan Sticky Menu_ checkox as well.
            4. Add needed menu items for these sections. The menu is built automatically from the page structure so you need to build that structure:
                * Add a new page, choose _Shortcut_ type on the dialog screen.
                * Set _Target mode_ to _Selected target_
                * Set the _Target_ to the prepared page.
                * Set _URL #fragment ID_ to match the _Section ID_ on the related content element.
            
            Done! Now when you scroll to the section on the page, a corresponsing menu item should be highlighted.
        reloadIfChanged: TRUE
        inspector:
          group: 'navOptions'
          position: 20


#
# Mixin for nav content elements, to add support for fixed/sticky/magellan
#
'M12.Foundation:AbstractNavBehavior':
  abstract: TRUE
  properties:
    navBehavior:
      type: 'string'
      ui:
        label: 'Menu behavior (e.g. sticky)'
        help:
          message: |
            Choose menu behavior.
            
            ##### Fixed position menu
            Set this option to make the menu stay fixed at the top of the page as you scroll.
            
            ##### Sticky menu
            Works similar to _Fixed position menu_ option, with the difference that you can put it anywhere on the site. When the menu reach the top visible area of the browser, it will act like the fixed menu and stick to the top area as users continue to scroll.
            
            ##### Magellan Sticky Menu
            This fixed-position navigation helps users **keep track of where they are on a page without scrolling**. See demo and technical details [here](http://foundation.zurb.com/docs/components/magellan.html).
        reloadIfChanged: TRUE
        inspector:
          group: 'options'
          position: 10
          editor: Content/Inspector/Editors/SelectBoxEditor
          editorOptions:
            placeholder: 'None'
            allowEmpty: TRUE
            values:
              fixed:
                label: 'Fixed position menu'
              sticky:
                label: 'Sticky menu'
              magellan:
                label: 'Magellan Sticky Menu'


#
# Mixin: tooltip
#
'M12.Foundation:AbstractTitleTooltip':
  abstract: TRUE
  ui:
    inspector:
      groups:
        tooltip:
          label: 'Tooltip'
          position: 91 # after AbstractFontIcon
          tab: view
  properties:
    htmlTitle:
      type: string
      ui:
        label: 'Tooltip text'
        help:
          message: |
            Set the tooltip for this content element.
            
            If used together with _Render as an enhanced tooltip_ option, the tooltip will be displayed as a nicer and enhanced tooltip. Otherwise default browser tooltip will be used.
            
            **Developer info**: this option sets `title="<value>"` attribute of the element.
        reloadIfChanged: FALSE
        inspector:
          group: 'tooltip'
          position: 10
          editorOptions:
            placeholder: 'Empty'
    tooltip:
      type: boolean
      ui:
        label: "Show as an enhanced tooltip"
        help:
          message: "When set, the tooltip will be displayed as a nicer, enhanced tooltip. Otherwise default browser tooltip will be used."
        inspector:
          group: 'tooltip'
          position: 20
    classTooltipPosition:
      type: string
      ui:
        label: 'Tooltip position'
        help:
          message: "Specify position of displayed tooltip (only when used with _Render as an enhanced tooltip_ setting)." 
        inspector:
          group: 'tooltip'
          position: 30
          editor: Content/Inspector/Editors/SelectBoxEditor
          editorOptions:
            placeholder: 'Default (Bottom)'
            allowEmpty: TRUE
            values:
              tip-top:
                label: 'Top'
              tip-bottom:
                label: 'Bottom'
              tip-left:
                label: 'Left'
              tip-right:
                label: 'Right'
    tooltipOptions:
      type: array
      ui:
        label: 'Tooltip options'
        inspector:
          group: 'tooltip'
          position: 40
          editor: Content/Inspector/Editors/SelectBoxEditor
          editorOptions:
            placeholder: 'Tooltip options'
            values:
              'disable_for_touch:true':
                label: 'Disable for touch'
              'show_on:small':
                label: 'Show on small device only'
              'show_on:medium':
                label: 'Show on: medium device only'
              'show_on:large':
                label: 'Show on: large device only'
